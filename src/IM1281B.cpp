#include "IM1281B.h"


// #define DEBUG   // 选择是否输出调试信息，注释掉此行则不会输出调试信息
#ifdef DEBUG
#define DEBUG_PRINT(x) Serial.print(x)
#define DEBUG_PRINTLN(x) Serial.println(x)
#else
   #define DEBUG_PRINT(x)
   #define DEBUG_PRINTLN(x)
#endif


static const uint8_t aucCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40
};

static const uint8_t aucCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
    0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
    0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
    0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
    0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
    0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
    0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
    0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
    0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
    0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
    0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
    0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
    0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};


#if defined(__AVR__) || defined(ESP8266) || defined(FREEDOM_E300_HIFIVE1)
IM1281B::IM1281B(SoftwareSerial *ss, uint16_t baudrate) {
  hwSerial = NULL;
  swSerial = ss;
  mySerial = swSerial;
  begin(baudrate);
}
#endif

IM1281B::IM1281B(HardwareSerial *hs, uint16_t baudrate) {
#if defined(__AVR__) || defined(ESP8266) || defined(FREEDOM_E300_HIFIVE1)
  swSerial = NULL;
#endif
  hwSerial = hs;
  mySerial = hwSerial;
  begin(baudrate);
}


IM1281B::IM1281B(Stream *serial, uint16_t baudrate) {
  hwSerial = NULL;
#if defined(__AVR__) || defined(ESP8266) || defined(FREEDOM_E300_HIFIVE1)
  swSerial = NULL;
#endif
  mySerial = serial;
  begin(baudrate);
}


void IM1281B::begin(uint16_t baudrate)
{
    delay(1000); // one second delay to let the sensor 'boot up'
  if (hwSerial)
    hwSerial->begin(baudrate);
  #if defined(__AVR__) || defined(ESP8266) || defined(FREEDOM_E300_HIFIVE1)
  if (swSerial)
    swSerial->begin(baudrate);
  #endif
}

void IM1281B::read_data_message()
{
  for (size_t i = 0; i < 8; i++)
    mySerial->write(Tx_Buffer[i]);
  DEBUG_PRINTLN("read_data_message send!");
}

bool IM1281B::get_CMD_message()
{
  uint16_t i = 0;
  uint16_t timer = 0;
  while(true)
    {
      if(!mySerial->available())
      {
          delay(10);
          timer++;
          if(timer >= 10)
          {
              DEBUG_PRINTLN("");
              DEBUG_PRINTLN("Date Receive Over.");
              cmdLenth = i;
              return true;
          }       
      }
      if (mySerial->available()){
        Rx_Buffer[i] = uint8_t(mySerial->read());
        i++;
      }
    }
}


bool IM1281B::analysis_data()
{
  DEBUG_PRINTLN("Analysis CMD data...");
  if(Rx_Buffer[0] == Read_ID && Rx_Buffer[2] == (cmdLenth - 5))
  {

    if (chkCRC(Rx_Buffer, cmdLenth-2))
    {
      Voltage_data=(((uint32_t)(Rx_Buffer[3]))<<24)|(((uint32_t)(Rx_Buffer[4]))<<16)|(((uint32_t)(Rx_Buffer[5]))<<8)|Rx_Buffer[6];
      Current_data=(((uint32_t)(Rx_Buffer[7]))<<24)|(((uint32_t)(Rx_Buffer[8]))<<16)|(((uint32_t)(Rx_Buffer[9]))<<8)|Rx_Buffer[10]; 
      Power_data=(((uint32_t)(Rx_Buffer[11]))<<24)|(((uint32_t)(Rx_Buffer[12]))<<16)|(((uint32_t)(Rx_Buffer[13]))<<8)|Rx_Buffer[14]; 
      Energy_data=(((uint32_t)(Rx_Buffer[15]))<<24)|(((uint32_t)(Rx_Buffer[16]))<<16)|(((uint32_t)(Rx_Buffer[17]))<<8)|Rx_Buffer[18]; 
      Pf_data=(((uint32_t)(Rx_Buffer[19]))<<24)|(((uint32_t)(Rx_Buffer[20]))<<16)|(((uint32_t)(Rx_Buffer[21]))<<8)|Rx_Buffer[22]; 
      CO2_data=(((uint32_t)(Rx_Buffer[23]))<<24)|(((uint32_t)(Rx_Buffer[24]))<<16)|(((uint32_t)(Rx_Buffer[25]))<<8)|Rx_Buffer[26];       
      Frequency_data=(((uint32_t)(Rx_Buffer[31]))<<24)|(((uint32_t)(Rx_Buffer[32]))<<16)|(((uint32_t)(Rx_Buffer[33]))<<8)|Rx_Buffer[34];
    }
  }
}

bool IM1281B::chkCRC(uint8_t* pucFrame, uint16_t usLen)
{
    uint8_t CRCLo = 0xff;
    uint8_t CRCHi = 0xff;
    int iIndex;
    // get CRC code
    while( usLen-- )
    {
        iIndex = CRCLo ^ *( pucFrame++ );
        CRCLo = ( uint8_t )( CRCHi ^ aucCRCHi[iIndex] );
        CRCHi = aucCRCLo[iIndex];
    }
    // check CRC
    DEBUG_PRINT("Get CRCLo:");
    DEBUG_PRINT(CRCLo);
    DEBUG_PRINT("  ");
    DEBUG_PRINT(Rx_Buffer[cmdLenth-2]);
    DEBUG_PRINT("  Get CRCHi:");
    DEBUG_PRINT(CRCHi);
    DEBUG_PRINT("  ");
    DEBUG_PRINTLN(Rx_Buffer[cmdLenth-1]);
    if (CRCLo == Rx_Buffer[cmdLenth-2] && CRCHi == Rx_Buffer[cmdLenth-1])
    {
      DEBUG_PRINTLN("CRC check success!");
      return true;
    }
    else
    {
      DEBUG_PRINTLN("CRC check faile!");
      return false;
    }
}

void IM1281B::update()
{
  // send message to get data
  clear_CMD_Buffer();
  read_data_message();
  delay(50);
  // get CMD data
  get_CMD_message();
  // analysis power data from CMD data
  analysis_data();
  delay(10);
}

void IM1281B::clear_CMD_Buffer()
{
  while (mySerial->available())
    mySerial->read();
}

void IM1281B::clearPower()
{
  for (size_t i = 0; i < 13; i++)
    mySerial->write(TX_Buffer_clear[i]);
  DEBUG_PRINTLN("Power data reset.");
}

float IM1281B::getVotage(){
  return (float)Voltage_data*0.0001;
}
float IM1281B::getCurrent(){
  return (float)Current_data*0.0001;
}
float IM1281B::getPower(){
  return (float)Power_data*0.0001;
}
float IM1281B::getEnergy(){
  return (float)Energy_data*0.0001;
}
float IM1281B::getPf(){
  return (float)Pf_data*0.001;
}
float IM1281B::getCO2(){
  return (float)CO2_data*0.0001;
}
float IM1281B::getFreq(){
  return (float)Frequency_data*0.01;
}

